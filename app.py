import streamlit as st
import random
from PIL import Image
import os
import pickle
from dataclasses import dataclass, field
from typing import List, Optional, Dict
import base64

# CSS Ïä§ÌÉÄÏùº Ï†ïÏùò
def set_custom_style():
    st.markdown("""
    <style>
    .main {
        background-color: #f5f7ff;
        padding: 20px;
    }
    .stApp {
        max-width: 1000px;
        margin: 0 auto;
    }
    .creature-card {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        border-left: 5px solid #4CAF50;
        transition: transform 0.3s ease;
    }
    .creature-card:hover {
        transform: translateY(-5px);
    }
    .creature-title {
        font-size: 24px;
        font-weight: bold;
        color: #303F9F;
        margin-bottom: 10px;
    }
    .attribute-fire {
        color: #FF5722;
        font-weight: bold;
    }
    .attribute-water {
        color: #2196F3;
        font-weight: bold;
    }
    .attribute-grass {
        color: #4CAF50;
        font-weight: bold;
    }
    .attribute-electric {
        color: #FFC107;
        font-weight: bold;
    }
    .emotion-happy {
        color: #4CAF50;
        font-weight: bold;
    }
    .emotion-normal {
        color: #9E9E9E;
        font-weight: bold;
    }
    .emotion-sad {
        color: #2196F3;
        font-weight: bold;
    }
    .emotion-depressed {
        color: #673AB7;
        font-weight: bold;
    }
    .emotion-angry {
        color: #F44336;
        font-weight: bold;
    }
    .stat-label {
        font-weight: bold;
        color: #555;
    }
    .dialogue-box {
        background-color: #f9f9f9;
        border-left: 3px solid #9c27b0;
        padding: 10px 15px;
        margin: 10px 0;
        border-radius: 0 5px 5px 0;
        font-style: italic;
    }
    .interact-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    .interact-button:hover {
        background-color: #45a049;
    }
    footer {
        text-align: center;
        margin-top: 50px;
        color: #777;
    }
    </style>
    """, unsafe_allow_html=True)

# Ï∫êÎ¶≠ÌÑ∞ ÌÅ¥ÎûòÏä§ Ï†ïÏùò
@dataclass
class Creature:
    name: str
    attribute: str
    emotion_value: int = 50  # Í∞êÏ†ï ÏàòÏπò (0-100)
    level: int = 1
    exp: int = 0
    evolve_level: int = 5
    dialogues: Dict[str, Dict[str, str]] = field(default_factory=dict)
    
    @property
    def emotion(self):
        """Í∞êÏ†ï ÏàòÏπòÏóê Îî∞Î•∏ Í∞êÏ†ï ÏÉÅÌÉú Î∞òÌôò"""
        if self.emotion_value >= 80:
            return "ÌñâÎ≥µ"
        elif self.emotion_value >= 50:
            return "ÌèâÎ≤î"
        elif self.emotion_value >= 20:
            return "Ïä¨Ìîî"
        else:
            return "Ïö∞Ïö∏"
    
    def get_dialogue(self):
        """ÌòÑÏû¨ Í∞êÏ†ï ÏÉÅÌÉúÏóê ÎßûÎäî ÎåÄÏÇ¨ Î∞òÌôò"""
        if self.name in self.dialogues and self.emotion in self.dialogues[self.name]:
            return self.dialogues[self.name][self.emotion]
        return f"{self.name}Ïù¥(Í∞Ä) {self.emotion} ÏÉÅÌÉúÏûÖÎãàÎã§."
    
    def interact(self):
        """Ï∫êÎ¶≠ÌÑ∞ÏôÄ ÍµêÍ∞êÌïòÍ∏∞"""
        old_emotion = self.emotion
        
        # Í∞êÏ†ï Î≥ÄÌôî (-10 ~ +15)
        emotion_change = random.randint(-10, 15)
        self.emotion_value = max(0, min(100, self.emotion_value + emotion_change))
        
        # Í≤ΩÌóòÏπò Ï¶ùÍ∞Ä
        self.exp += 10
        
        # ÎåÄÏÇ¨ Í∞ÄÏ†∏Ïò§Í∏∞
        dialogue = self.get_dialogue()
        
        # Í≤∞Í≥º Î©îÏãúÏßÄ
        message = f"{self.name}Ïùò Í∞êÏ†ïÏù¥ {old_emotion}ÏóêÏÑú {self.emotion}ÏúºÎ°ú Î≥ÄÌñàÏäµÎãàÎã§! (Í≤ΩÌóòÏπò +10)"
        
        # Î†àÎ≤®ÏóÖ Ï≤¥ÌÅ¨
        if self.exp >= self.level * 20:
            self.level += 1
            message += f"\nÎ†àÎ≤®ÏóÖ! {self.name}Ïùò Î†àÎ≤®Ïù¥ {self.level}Ïù¥ ÎêòÏóàÏäµÎãàÎã§!"
            
            # ÏßÑÌôî Ï≤¥ÌÅ¨
            if self.level >= self.evolve_level:
                message += f"\nüåü {self.name}Í∞Ä ÏßÑÌôî Î†àÎ≤®Ïóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§! ÏßÑÌôî ÏôÑÎ£å! üåü"
                
        return message, dialogue

# Ï∫êÎ¶≠ÌÑ∞Î≥Ñ ÎåÄÏÇ¨ Ï†ïÏùò
def get_default_dialogues():
    return {
        "ÌîºÏπ¥Ï∏Ñ": {
            "ÌñâÎ≥µ": "ÌîºÏπ¥ÌîºÏπ¥! ÎÑàÎûë Ìï®Íªò ÏûàÏúºÎ©¥ Ï†ïÎßê Í∏∞Îªê!",
            "ÌèâÎ≤î": "ÌîºÏπ¥~ Í∑∏Îü≠Ï†ÄÎü≠ Í¥úÏ∞ÆÏïÑ~",
            "Ïä¨Ìîî": "ÌîºÏπ¥... Ïô†ÏßÄ Ïò§ÎäòÏùÄ Í∏∞Î∂ÑÏù¥ Ïïà Ï¢ãÏïÑ...",
            "Ïö∞Ïö∏": "Ìîº...Ïπ¥... ÎÇò ÌòºÏûê ÎÇ®Í≤®ÏßÑ ÎäêÎÇåÏù¥Ïïº..."
        },
        "Íº¨Î∂ÄÍ∏∞": {
            "ÌñâÎ≥µ": "Íº¨Î∂ÅÍº¨Î∂Å! Î¨ºÎÜÄÏù¥ Í∞ôÏù¥ ÌïòÏûê!",
            "ÌèâÎ≤î": "Íº¨Î∂Å~ Ïò§Îäò ÎÇ†Ïî®Í∞Ä Ï¢ãÎÑ§~",
            "Ïä¨Ìîî": "Íº¨Î∂Å... ÎπÑÍ∞Ä Ïò§Î†§ÎÇòÎ¥ê...",
            "Ïö∞Ïö∏": "Íº¨...Î∂Å... Î¨ºÏù¥ ÎÑàÎ¨¥ Ï∞®Í∞ÄÏõå..."
        },
        "Ïù¥ÏÉÅÌï¥Ïî®": {
            "ÌñâÎ≥µ": "Ïù¥ÏÉÅ~Ìï¥! ÌñáÏÇ¥Ïù¥ ÎÑàÎ¨¥ Ï¢ãÏïÑ!",
            "ÌèâÎ≤î": "Ïù¥ÏÉÅ~ ÏÉàÏãπÏù¥ ÏûêÎùºÍ≥† ÏûàÏñ¥",
            "Ïä¨Ìîî": "Ïù¥ÏÉÅ... ÌñáÎπõÏù¥ Î∂ÄÏ°±Ìï¥...",
            "Ïö∞Ïö∏": "Ïù¥...ÏÉÅ... Í≤®Ïö∏Ïù¥ ÎÑàÎ¨¥ Í∏∏Ïñ¥..."
        }
    }

# ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
def init_session_state():
    if 'creatures' not in st.session_state:
        # Í∏∞Î≥∏ ÎåÄÏÇ¨ Í∞ÄÏ†∏Ïò§Í∏∞
        default_dialogues = get_default_dialogues()
        
        # Í∏∞Î≥∏ Ï∫êÎ¶≠ÌÑ∞ ÏÉùÏÑ±
        st.session_state.creatures = [
            Creature(
                name="ÌîºÏπ¥Ï∏Ñ", 
                attribute="Ï†ÑÍ∏∞", 
                emotion_value=random.randint(40, 90), 
                evolve_level=4, 
                dialogues=default_dialogues
            ),
            Creature(
                name="Íº¨Î∂ÄÍ∏∞", 
                attribute="Î¨º", 
                emotion_value=random.randint(30, 80), 
                evolve_level=5, 
                dialogues=default_dialogues
            ),
            Creature(
                name="Ïù¥ÏÉÅÌï¥Ïî®", 
                attribute="ÌíÄ", 
                emotion_value=random.randint(20, 70), 
                evolve_level=6, 
                dialogues=default_dialogues
            ),
        ]
    
    if 'interaction_history' not in st.session_state:
        st.session_state.interaction_history = []

# Í∞êÏ†ï Ïù¥Î™®Ìã∞ÏΩò Í∞ÄÏ†∏Ïò§Í∏∞
def get_emotion_emoji(emotion):
    if emotion == "ÌñâÎ≥µ":
        return "üòä"
    elif emotion == "ÌèâÎ≤î":
        return "üòê"
    elif emotion == "Ïä¨Ìîî":
        return "üò¢"
    elif emotion == "Ïö∞Ïö∏":
        return "üò∞"
    elif emotion == "ÌôîÎÇ®":
        return "üò°"
    return "üòê"

# ÏÜçÏÑ± ÏïÑÏù¥ÏΩò Í∞ÄÏ†∏Ïò§Í∏∞
def get_attribute_icon(attribute):
    if attribute == "Î∂à":
        return "üî•"
    elif attribute == "Î¨º":
        return "üíß"
    elif attribute == "ÌíÄ":
        return "üåø"
    elif attribute == "Ï†ÑÍ∏∞":
        return "‚ö°"
    return "‚ú®"

# ÏÜçÏÑ± Ïä§ÌÉÄÏùº ÌÅ¥ÎûòÏä§ Í∞ÄÏ†∏Ïò§Í∏∞
def get_attribute_class(attribute):
    if attribute == "Î∂à":
        return "attribute-fire"
    elif attribute == "Î¨º":
        return "attribute-water"
    elif attribute == "ÌíÄ":
        return "attribute-grass"
    elif attribute == "Ï†ÑÍ∏∞":
        return "attribute-electric"
    return ""

# Í∞êÏ†ï Ïä§ÌÉÄÏùº ÌÅ¥ÎûòÏä§ Í∞ÄÏ†∏Ïò§Í∏∞
def get_emotion_class(emotion):
    if emotion == "ÌñâÎ≥µ":
        return "emotion-happy"
    elif emotion == "ÌèâÎ≤î":
        return "emotion-normal"
    elif emotion == "Ïä¨Ìîî":
        return "emotion-sad"
    elif emotion == "Ïö∞Ïö∏":
        return "emotion-depressed"
    elif emotion == "ÌôîÎÇ®":
        return "emotion-angry"
    return ""

# Í≤ΩÌóòÏπò Î∞î ÌëúÏãú
def render_exp_bar(creature):
    next_level_exp = creature.level * 20
    progress = min(1.0, creature.exp / next_level_exp)
    
    st.progress(progress)
    st.caption(f"Í≤ΩÌóòÏπò: {creature.exp}/{next_level_exp}")

# Í∞êÏ†ï ÏàòÏπò Î∞î ÌëúÏãú
def render_emotion_bar(creature):
    emotion_color = "green" if creature.emotion_value >= 80 else \
                   "blue" if creature.emotion_value >= 50 else \
                   "orange" if creature.emotion_value >= 20 else "red"
    
    st.progress(creature.emotion_value / 100, emotion_color)
    st.caption(f"Í∞êÏ†ï ÏàòÏπò: {creature.emotion_value}/100")

# Ï∫êÎ¶≠ÌÑ∞ Ïπ¥Îìú Î†åÎçîÎßÅ
def render_creature_card(creature, index):
    st.markdown(f"""
    <div class="creature-card">
        <div class="creature-title">
            {creature.name} {get_attribute_icon(creature.attribute)} Lv.{creature.level}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # ÏÜçÏÑ± Ï†ïÎ≥¥
        attribute_class = get_attribute_class(creature.attribute)
        st.markdown(f"""
        <span class="stat-label">ÏÜçÏÑ±:</span> 
        <span class="{attribute_class}">{creature.attribute} {get_attribute_icon(creature.attribute)}</span>
        """, unsafe_allow_html=True)
        
        # Í∞êÏ†ï ÏÉÅÌÉú
        emotion_class = get_emotion_class(creature.emotion)
        st.markdown(f"""
        <span class="stat-label">Í∞êÏ†ï:</span> 
        <span class="{emotion_class}">{creature.emotion} {get_emotion_emoji(creature.emotion)}</span>
        """, unsafe_allow_html=True)
        
        # Í∞êÏ†ï ÏàòÏπò Î∞î
        render_emotion_bar(creature)
        
        # Ï∫êÎ¶≠ÌÑ∞ ÎåÄÏÇ¨
        st.markdown(f"""
        <div class="dialogue-box">
            "{creature.get_dialogue()}"
        </div>
        """, unsafe_allow_html=True)
        
        # Î†àÎ≤®Í≥º Í≤ΩÌóòÏπò Î∞î
        st.markdown(f"""
        <span class="stat-label">Î†àÎ≤®:</span> {creature.level} / ÏßÑÌôî Î†àÎ≤®: {creature.evolve_level}
        """, unsafe_allow_html=True)
        
        render_exp_bar(creature)
        
        # ÏßÑÌôî ÏôÑÎ£å Î©îÏãúÏßÄ
        if creature.level >= creature.evolve_level:
            st.success(f"üåü {creature.name}Ïùò ÏßÑÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üåü")
    
    with col2:
        # ÍµêÍ∞êÌïòÍ∏∞ Î≤ÑÌäº
        if st.button(f"{get_emotion_emoji(creature.emotion)} ÍµêÍ∞êÌïòÍ∏∞", key=f"interact_{index}"):
            message, dialogue = creature.interact()
            
            # ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä
            st.session_state.interaction_history.append(f"{message}\n{creature.name}: \"{dialogue}\"")
            if len(st.session_state.interaction_history) > 5:
                st.session_state.interaction_history.pop(0)
                
            st.success(message)
            st.info(f"{creature.name}: \"{dialogue}\"")
            st.rerun()

# ÌûàÏä§ÌÜ†Î¶¨ ÌëúÏãú
def render_history():
    if st.session_state.interaction_history:
        st.markdown("### ÏµúÍ∑º ÌôúÎèô")
        for i, message in enumerate(reversed(st.session_state.interaction_history)):
            st.info(message)

# Î©îÏù∏ Ìï®Ïàò
def main():
    st.set_page_config(
        page_title="Í∞êÏ†ï ÏàòÏßë Í≤åÏûÑ", 
        page_icon="üéÆ",
        layout="wide"
    )
    
    # Ïª§Ïä§ÌÖÄ CSS Ï†ÅÏö©
    set_custom_style()
    
    # ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    init_session_state()
    
    # ÏÇ¨Ïù¥ÎìúÎ∞î
    with st.sidebar:
        st.image("https://raw.githubusercontent.com/streamlit/streamlit/master/examples/data/monster-battle-cover.png", use_column_width=True)
        st.title("üéÆ Í∞êÏ†ï ÏàòÏßë Í≤åÏûÑ")
        st.markdown("Í∞êÏ†ïÏùÑ Í∞ÄÏßÑ Í∑ÄÏó¨Ïö¥ Ï∫êÎ¶≠ÌÑ∞Îì§ÏùÑ ÏàòÏßëÌïòÍ≥†, Ï∫êÎ¶≠ÌÑ∞ÏôÄ ÍµêÍ∞êÌïòÎ©¥ÏÑú ÏÑ±Ïû•ÏãúÌÇ§Îäî Í≤åÏûÑ")
        
        # ÌûàÏä§ÌÜ†Î¶¨ ÌëúÏãú
        render_history()
        
        st.markdown("---")
        st.markdown("¬© 2023 Í∞êÏ†ï ÏàòÏßë Í≤åÏûÑ. Î™®Îì† Í∂åÎ¶¨ Î≥¥Ïú†.")
    
    # Î©îÏù∏ ÏΩòÌÖêÏ∏†
    st.title("üèÜ ÎÇòÏùò Ï∫êÎ¶≠ÌÑ∞ Ïª¨Î†âÏÖò")
    
    # Ï∫êÎ¶≠ÌÑ∞ Î™©Î°ùÏùÑ Ïπ¥Îìú ÌòïÌÉúÎ°ú ÌëúÏãú
    for i, creature in enumerate(st.session_state.creatures):
        render_creature_card(creature, i)

if __name__ == "__main__":
    main() 